/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Colemak_Switch {
            bindings = <&to 3>;
            key-positions = <0 11>;
            layers = <0>;
        };

        qwerty_switch {
            bindings = <&to 0>;
            key-positions = <0 11>;
            layers = <3>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESC           &kp N1  &kp N2  &kp N3    &kp N4    &kp N5                        &kp N6  &kp N7    &kp N8     &kp N9   &kp N0         &kp DELETE
&kp TAB           &kp Q   &kp W   &kp F     &kp P     &kp B                         &kp J   &kp L     &kp U      &kp Y    &kp SEMICOLON  &kp MINUS
&kp LEFT_SHIFT    &kp A   &kp R   &kp S     &kp T     &kp G                         &kp M   &kp N     &kp E      &kp I    &kp O          &kp SQT
&kp LEFT_CONTROL  &kp Z   &kp X   &kp C     &kp D     &kp V   &kp HOME     &kp END  &kp K   &kp H     &kp COMMA  &kp DOT  &kp FSLH       &kp EQUAL
                                  &kp LALT  &kp LGUI  &mo 1   &kp SPACE    &kp RET  &mo 2   &kp BSPC  &tog 2
            >;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&trans  &bt BT_SEL 0       &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                          &kp F1                &kp F2                 &kp F3          &kp F4           &kp F5   &kp F6
&trans  &none              &none            &none         &none         &bt BT_CLR                            &kp F7                &kp F8                 &kp F9          &kp F10          &kp F11  &kp F12
&trans  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp K_MUTE    &none         &kp LC(LA(DELETE))                    &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp LEFT_BRACE  &kp RIGHT_BRACE  &none    &kp GRAVE
&trans  &none              &none            &none         &none         &kp LG(L)           &trans    &trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none           &none            &none    &kp BACKSLASH
                                            &trans        &trans        &trans              &trans    &trans  &trans                &trans                 &trans
            >;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&trans  &none         &none         &none         &none         &none                           &trans          &none           &trans        &trans           &trans  &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                          &none           &none           &none         &none            &none   &kp CAPSLOCK
&trans  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0                    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &none   &none
&trans  &none         &none         &none         &none         &none         &trans    &trans  &none           &none           &none         &none            &none   &none
                                    &trans        &trans        &trans        &trans    &trans  &trans          &trans          &trans
            >;
        };

        layer_3 {
            bindings = <
&kp ESC    &kp N1  &kp N2  &kp N3    &kp N4    &kp N5                        &kp N6  &kp N7    &kp N8     &kp N9   &kp N0    &kp DEL
&kp TAB    &kp Q   &kp W   &kp E     &kp R     &kp T                         &kp Y   &kp U     &kp I      &kp O    &kp P     &kp MINUS
&kp LS(S)  &kp A   &kp S   &kp D     &kp F     &kp G                         &kp H   &kp J     &kp K      &kp L    &kp SEMI  &kp SQT
&kp LC(Z)  &kp Z   &kp X   &kp C     &kp V     &kp B   &kp HOME     &kp END  &kp N   &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp EQUAL
                           &kp LALT  &kp LGUI  &mo 1   &kp SPACE    &kp RET  &mo 2   &kp BSPC  &tog 2
            >;
        };
    };
};
